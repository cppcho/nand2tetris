// Initialize SP (RAM[0]) to 256 (Initial stack pointer)
@256
D=A
@SP
M=D
// File: projects/07/StackArithmetic/StackTest/StackTest.vm
// push constant #{index}
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=D-M
M=0
@LBL0
D;JEQ
D=0
@LBL1
0;JMP
(LBL0)
D=-1
(LBL1)
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=D-M
M=0
@LBL2
D;JEQ
D=0
@LBL3
0;JMP
(LBL2)
D=-1
(LBL3)
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=D-M
M=0
@LBL4
D;JEQ
D=0
@LBL5
0;JMP
(LBL4)
D=-1
(LBL5)
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@892
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=D-M
M=0
@LBL6
D;JGT
D=0
@LBL7
0;JMP
(LBL6)
D=-1
(LBL7)
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@892
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=D-M
M=0
@LBL8
D;JGT
D=0
@LBL9
0;JMP
(LBL8)
D=-1
(LBL9)
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=D-M
M=0
@LBL10
D;JGT
D=0
@LBL11
0;JMP
(LBL10)
D=-1
(LBL11)
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=D-M
M=0
@LBL12
D;JLT
D=0
@LBL13
0;JMP
(LBL12)
D=-1
(LBL13)
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=D-M
M=0
@LBL14
D;JLT
D=0
@LBL15
0;JMP
(LBL14)
D=-1
(LBL15)
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=D-M
M=0
@LBL16
D;JLT
D=0
@LBL17
0;JMP
(LBL16)
D=-1
(LBL17)
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@57
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@53
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=D+M
M=0
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=M-D
M=0
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
AM=M-1
D=M
M=0
D=-D
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=D&M
M=0
@SP
A=M
M=D
@SP
M=M+1
// push constant #{index}
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// or
@SP
AM=M-1
D=M
M=0
@SP
AM=M-1
D=D|M
M=0
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
AM=M-1
D=M
M=0
D=!D
@SP
A=M
M=D
@SP
M=M+1
