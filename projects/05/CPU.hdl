// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=false,
        b=instruction,
        sel=instruction[15],
        out[12]=a,
        out[11]=c1,
        out[10]=c2,
        out[9]=c3,
        out[8]=c4,
        out[7]=c5,
        out[6]=c6,
        out[5]=d1,
        out[4]=d2,
        out[3]=writeM,
        out[2]=j1,
        out[1]=j2,
        out[0]=j3
    );

    // A-instruction when MSB is 0, load value to ARegister
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=d1, out=loadA);
    Mux16(a[0..14]=instruction[0..14], a[15]=false, b=outALU2, sel=instruction[15], out=inA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM, out=outA2);

    // a-bit is 1, use M, a-bit is 0, use A
    Mux16(a=outA, b=inM, sel=a, out=outAorM);
    ALU(x=outD, y=outAorM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=outALU1, out=outALU2, zr=outALUIsZero, ng=outALUIsNegative);

    // D-Register
    DRegister(in=outALU1, load=d2, out=outD);

    // PC
    Or(a=outALUIsNegative, b=outALUIsZero, out=outALUIsZeroOrNegative);
    Not(in=outALUIsZeroOrNegative, out=outALUIsPositive);
    And(a=j1, b=outALUIsNegative, out=jump1);
    And(a=j2, b=outALUIsZero, out=jump2);
    And(a=j3, b=outALUIsPositive, out=jump3);
    Or(a=jump1, b=jump2, out=jump12);
    Or(a=jump12, b=jump3, out=jump);
    PC(in=outA2, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
